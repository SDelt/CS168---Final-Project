--------------------------------------------- 5/8/2024 ---------------------------------------------

Unable to finish by project due date
- Infinite loop when mining
- Provide missing blocks for donald
- update miner

Changes to block.py:
- added methods to deduct or add to the balances of the clients last known block

    def deduct_balance(self, addr, amount):
        self.balances[addr] -= amount
    
    def add_to_balance(self, addr, amount):
        self.balances[addr] += amount

Changes to client.py:
- Added local broadcasting for requesting and receiving blocks

    def request_missing_block(self, block):
        from blockchain import Blockchain
        missing_block_hash = block.prev_block_hash
        self.log(f"Asking for missing block: {missing_block_hash}")

        msg = {
            'from': self.address,
            'missing': missing_block_hash
        }

        for client in self.net.clients:
            if client.address != self.address:  # Exclude self from broadcasting
                client.receive_missing_block_request(msg)
    
    def receive_missing_block_request(self, msg):
        missing_block_hash = msg['missing']
        if missing_block_hash in self.blocks:
            block = self.blocks[missing_block_hash]
            self.log(f"{self.name}: Providing missing block {missing_block_hash}")
            self.send_block(block)
			
- Added functions so when a client object is sent to fakeNet and then a POST_TRANSACTION message is received, then we can call make_deductions to adjust the sender and receivers balances

	def make_deduction(self, tx):
        self.validate_transaction(tx)
        self.process_payments(tx)
        self.apply_transaction_fee(tx)

    def validate_transaction(self, tx):
        total_payments_with_fee = self.calculate_total_with_fee(tx)
        sender_balance = self.last_confirmed_block.balance_of(self.address)
        if total_payments_with_fee > sender_balance:
            raise Exception(f"Requested {total_payments_with_fee}, but account only has {sender_balance}.")

    def calculate_total_with_fee(self, tx):
        total_payments = sum(output['amount'] for output in tx.outputs)
        fee = tx.fee if hasattr(tx, 'fee') else Blockchain.get_default_tx_fee()
        return total_payments + fee

    def process_payments(self, tx):
        total_payments = sum(output['amount'] for output in tx.outputs)
        amount_to_pay = total_payments // len(tx.outputs)
        for output in tx.outputs:
            self.send_payment(output['address'], amount_to_pay)

    def apply_transaction_fee(self, tx):
        fee = tx.fee if hasattr(tx, 'fee') else Blockchain.get_default_tx_fee()
        total_payments_with_fee = sum(output['amount'] for output in tx.outputs) + fee
        self.last_confirmed_block.deduct_balance(self.address, total_payments_with_fee)

    def send_payment(self, recipient_address, amount):
        self.last_confirmed_block.add_to_balance(recipient_address, amount)
        logging.info(f"Updated {amount} gold to {recipient_address}")
			
Changes in block.py:
- Added a function to change the balance of the last_confirmed_block in client when a client sends another some money

    def deduct_balance(self, addr, amount):
        self.balances[addr] -= amount

--------------------------------------------- 5/7/2024 ---------------------------------------------

Major overhaul for project realized the communication to fakeNet was only suitable for clients who were not miners. 
So we revisted our emit functions in client and miner. We also revisted the broadcast and send_message functions in fakeNet

We also realized that miners.py and clients.py were not actually changing the values of the users. So we had a big overhaul.
now the miners are effecitvely looking for a proof of work and are attempint to cut to new blocks. However, somewhere in
receive_blocks in miner.py, we are getting stuck in an infinite loop

After we fix the infinite loop, we can then move to making sure that the client to client transaction of coins actually adjust
the values of each client. Bobs address is passed into post_transaction when alice calls it. So I beleive we can use that address of
bobs, to find him on the blockchain utilizing blockchain.get_clients, and then adjust his values

--------------------------------------------- 5/5/2024 ---------------------------------------------

Need to fix:
- Need to fix adding the later miner donald to the blockchain and fakeNet
- Need to make sure that post_transaction is actually deducting the amount from alice and giving it to bob
- Cannot hard code DEFAULT_TX_FEE in client.py forever, just doing so to fix other bugs. Most likely and import error

Current error:
Traceback (most recent call last):
  File "driver.py", line 37, in <module>
    bc.start(8000)
  File "C:\CS 168\Project\blockchain.py", line 128, in start
    miner.initialize()
  File "C:\CS 168\Project\miner.py", line 13, in initialize
    self.start_new_search()
  File "C:\CS 168\Project\miner.py", line 19, in start_new_search
    self.current_block = Blockchain.make_block(self.address, self.last_block)
  File "C:\CS 168\Project\blockchain.py", line 97, in make_block
    return self.block_class(*args)
AttributeError: 'str' object has no attribute 'block_class'

Changes in fakeNet:
- Conversions to correct parameters types in send_message
    
        # Convert bytes data to string
        if isinstance(o, bytes):
            o = o.decode('utf-8')

        # Convert non-dict objects to dictionary
        if not isinstance(o, dict):
            o_dict = o.__dict__
        else:
            o_dict = o

        # Convert bytes data in pub_key to string (assuming it's in PEM format)
        if 'pub_key' in o_dict and isinstance(o_dict['pub_key'], bytes):
            o_dict['pub_key'] = o_dict['pub_key'].decode('utf-8')

        # Serializing/deserializing the object to prevent cheating in single threaded mode.
        o2 = json.loads(json.dumps(o_dict))

        client = self.clients.get(address)

        def deliver():
            if client:
                client.receive_message(msg, o2)

        delay = random.random() * self.message_delay_max
        if random.random() > self.chance_message_fails:
            Timer(delay / 1000, deliver).start()

Changes in client.py:
- By accident, the clients were being registered to fakeNet when being initialized in client.py
	- Removed this so registrations occurs only in blockchain.py

Changes in blockchain.py:
- We had to adjust the client registration to the blockchain and to fakeNet 
	- Forgot to include miner case
	- Also had to work around rest parameters in JS, by adding a pointers for clients

    def register_clients(self, amount, *clients):
        for client in clients:
            self.client_address_map[client.address] = client
            if client.name:
                self.client_name_map[client.name] = client
            self.clients.append(client)
            if isinstance(client, Miner):
                self.miners.append(client)
            client.net = self.net
            # Clients address does print correctly if we use print("Client Address in Blockchain: ", client.address)
            self.net.register(client)
            self.initial_balances[client.address] = amount
			
- Adjusted the way parameters are sent in intialized_clients to register_clients
	
	self.register_clients(client, client_cfg['amount']) <---> self.register_clients(client_cfg['amount'], client) 

--------------------------------------------- 5/4/2024 ---------------------------------------------

Need to fix:
- Cannot hard code DEFAULT_TX_FEE in client.py forever, just doing so to fix other bugs. Most likely and import error
- Communcation with fakeNet

Changes in client.py:
- keypairs cannot be references like attributes, must use string identifier
	- Cannot: self.key_pair.public 			Can: self.key_pair['public']
	- We fixed this for both the public and private

Changes in blockchain.py:
- updated make transaction functions to correctly handle arguments sent from client
	
	
	@staticmethod
    def make_transaction(*args): # Get the arguments from the client and make an instance of the blockchain
        bc = Blockchain.get_instance()
        return bc._make_transaction(*args)

    def _make_transaction(self, *args): # Hanlde the creation of the transaction
        transaction_data = args[0]  # Extracting the transaction data dictionary from args
        from_address = transaction_data.get('from')
        nonce = transaction_data.get('nonce')
        pub_key = transaction_data.get('pub_key')
        sig = transaction_data.get('sig')
        outputs = transaction_data.get('outputs')
        fee = transaction_data.get('fee', 0)  # Default fee is 0 if not provided
        data = transaction_data.get('data')
        
        if from_address is None or nonce is None or pub_key is None:
            raise ValueError("Required transaction data is missing.")
        
        return self.transaction_class(from_address, nonce, pub_key, sig=sig, outputs=outputs, fee=fee, data=data)


Changes in transaction.py:
- Had to update id creation to convert the keys 

    @property
    def id(self):
        transaction_data = {
            'from': self.from_address,
            'nonce': self.nonce,
            'pub_key': self.pub_key.decode('utf-8'),  # Convert bytes to string
            'outputs': self.outputs,
            'fee': self.fee,
            'data': self.data
        }
        return hash('TX' + json.dumps(transaction_data, sort_keys=True))
		
Changes in fakeNet.py:


Current error:

Traceback (most recent call last):
  File "driver.py", line 34, in <module>
    alice.post_transaction([{"amount": 40, "address": bob.address}])
  File "C:\CS 168\Project\client.py", line 50, in post_transaction
    return self.post_generic_transaction({'outputs': outputs, 'fee': fee})
  File "C:\CS 168\Project\client.py", line 72, in post_generic_transaction
    self.net.broadcast(Blockchain.POST_TRANSACTION, tx_dict)
  File "C:\CS 168\Project\fakeNet.py", line 17, in broadcast
    self.send_message(address, msg, o)
  File "C:\CS 168\Project\fakeNet.py", line 27, in send_message
    o2 = json.loads(json.dumps(o_dict))
  File "C:\Program Files\Python38\lib\json\__init__.py", line 231, in dumps
    return _default_encoder.encode(obj)
  File "C:\Program Files\Python38\lib\json\encoder.py", line 199, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "C:\Program Files\Python38\lib\json\encoder.py", line 257, in iterencode
    return _iterencode(o, 0)
  File "C:\Program Files\Python38\lib\json\encoder.py", line 179, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type bytes is not JSON serializable



--------------------------------------------- 5/3/2024 ---------------------------------------------

Modifications:
fixed the "show_all_balances" function in clients.py
	- The issue was, the gensis block was being passed from blockchain.py::set_genesis_block->client.py::set_genesis_block
	  however, the genesis block was never being saves to the clients own blocks

Changes made in client.py:
	- Added self.blocks.append(block) to set_genesis_block
	- Changes blocks from a dict to a array/list	blocks = []

Change made in blockchain.py and client.py:
	- Added some debugging statements that print for client initialization and genesis block

Current error:

Alice is transferring 40 gold to qC8KOwVYQop3qRUZ7piWVSuiOe0ufroHknxoGZIkxAQ=
Traceback (most recent call last):
  File "driver.py", line 34, in <module>
    alice.post_transaction([{"amount": 40, "address": bob.address}])
  File "C:\CS 168\Project\client.py", line 42, in post_transaction
    fee = Blockchain.DEFAULT_TX_FEE
AttributeError: type object 'Blockchain' has no attribute 'DEFAULT_TX_FEE'

------------------------------------------  Dubbing lines that worked successfully ------------------------------------------------------------
print("File: Block      Line: 26       Msg: Inside init")

print("file: Blockchain    line: 64     msg: Genesis block: ", g)
print("file: Blockchain   line: 81/82   msg: below")
print(f"Initialized client: {client.name}, Address: {client.address}, Amount: {client_cfg['amount']}")
print("file: Blockchain		Line: 91 	Client Address in Blockchain: ", client.address)
print("file: Blockchain		Line: 92	Miner: ", client.name)
print("File: Blockchain     Line: 170       Msg: Mining initialize") # used when we had getter functions


print("File: Client     Line: 45    Outputs:", outputs)
print("File: Client     Line: 46    Fee:", fee)
print("file: Client    line: 83     msg: Blocks array in show_all_balances: ", self.blocks)  # Debugging line
print("file: Client     line: 90   msg: Genesis Block in set_genesis_block ", block)

print("File: Driver     Line: 38    Msg: Start the mining in blockchain")

print("File: FakeNet	Line: 16	Client Address in FakeNet", address)
print("File: FakeNet    Line: 20    Self: ", self)
print("")
print("File: FakeNet    Line: 22   Address: ", address)
print("")
print("File: FakeNet    Line: 24    Msg: ", msg)
print("")
print("File: FakeNet    Line: 20    O: ", o)
print("")

print("file: Miner		Line: 10	inside init")
print("File: Miner      Line: 13       Msg: Inside miner intialize")    
print("File: Miner      Line: 19       Msg: Inside miner start_new_search")    


print("File: Transaction	Line: 28	Self: ", self)
print("File: Transaction	Line: 29	Private key: ", priv_key)
