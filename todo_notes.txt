--------------------------------------------- 5/4/2024 ---------------------------------------------

Need to fix:
- Cannot hard code DEFAULT_TX_FEE in client.py forever, just doing so to fix other bugs. Most likely and import error
- Communcation with fakeNet

Changes in client.py:
- keypairs cannot be references like attributes, must use string identifier
	- Cannot: self.key_pair.public 			Can: self.key_pair['public']
	- We fixed this for both the public and private

Changes in blockchain.py:
- updated make transaction functions to correctly handle arguments sent from client
	
	
	@staticmethod
    def make_transaction(*args): # Get the arguments from the client and make an instance of the blockchain
        bc = Blockchain.get_instance()
        return bc._make_transaction(*args)

    def _make_transaction(self, *args): # Hanlde the creation of the transaction
        transaction_data = args[0]  # Extracting the transaction data dictionary from args
        from_address = transaction_data.get('from')
        nonce = transaction_data.get('nonce')
        pub_key = transaction_data.get('pub_key')
        sig = transaction_data.get('sig')
        outputs = transaction_data.get('outputs')
        fee = transaction_data.get('fee', 0)  # Default fee is 0 if not provided
        data = transaction_data.get('data')
        
        if from_address is None or nonce is None or pub_key is None:
            raise ValueError("Required transaction data is missing.")
        
        return self.transaction_class(from_address, nonce, pub_key, sig=sig, outputs=outputs, fee=fee, data=data)


Changes in transaction.py:
- Had to update id creation to convert the keys 

    @property
    def id(self):
        transaction_data = {
            'from': self.from_address,
            'nonce': self.nonce,
            'pub_key': self.pub_key.decode('utf-8'),  # Convert bytes to string
            'outputs': self.outputs,
            'fee': self.fee,
            'data': self.data
        }
        return hash('TX' + json.dumps(transaction_data, sort_keys=True))
		
Changes in fakeNet.py:


Current error:

Traceback (most recent call last):
  File "driver.py", line 34, in <module>
    alice.post_transaction([{"amount": 40, "address": bob.address}])
  File "C:\CS 168\Project\client.py", line 50, in post_transaction
    return self.post_generic_transaction({'outputs': outputs, 'fee': fee})
  File "C:\CS 168\Project\client.py", line 72, in post_generic_transaction
    self.net.broadcast(Blockchain.POST_TRANSACTION, tx_dict)
  File "C:\CS 168\Project\fakeNet.py", line 17, in broadcast
    self.send_message(address, msg, o)
  File "C:\CS 168\Project\fakeNet.py", line 27, in send_message
    o2 = json.loads(json.dumps(o_dict))
  File "C:\Program Files\Python38\lib\json\__init__.py", line 231, in dumps
    return _default_encoder.encode(obj)
  File "C:\Program Files\Python38\lib\json\encoder.py", line 199, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "C:\Program Files\Python38\lib\json\encoder.py", line 257, in iterencode
    return _iterencode(o, 0)
  File "C:\Program Files\Python38\lib\json\encoder.py", line 179, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type bytes is not JSON serializable



--------------------------------------------- 5/3/2024 ---------------------------------------------

Modifications:
fixed the "show_all_balances" function in clients.py
	- The issue was, the gensis block was being passed from blockchain.py::set_genesis_block->client.py::set_genesis_block
	  however, the genesis block was never being saves to the clients own blocks

Changes made in client.py:
	- Added self.blocks.append(block) to set_genesis_block
	- Changes blocks from a dict to a array/list	blocks = []

Change made in blockchain.py and client.py:
	- Added some debugging statements that print for client initialization and genesis block

Current error:

Alice is transferring 40 gold to qC8KOwVYQop3qRUZ7piWVSuiOe0ufroHknxoGZIkxAQ=
Traceback (most recent call last):
  File "driver.py", line 34, in <module>
    alice.post_transaction([{"amount": 40, "address": bob.address}])
  File "C:\CS 168\Project\client.py", line 42, in post_transaction
    fee = Blockchain.DEFAULT_TX_FEE
AttributeError: type object 'Blockchain' has no attribute 'DEFAULT_TX_FEE'

------------------------------------------------------------------------------------------------------

